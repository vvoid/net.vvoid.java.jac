package net.vvoid.java.jac;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class CommandTabjPanel extends javax.swing.JPanel {

  private final HistoryManager historyManager;
  private final RunCmdHelper cmdHelper;

  private final Set<Integer> keysPressed = new HashSet<>();

  private boolean atEndOfListFirstTime;

  public HistoryManager getHistoryManager() {
    return historyManager;
  }

  /**
   * Creates new form NewJPanel
   *
   * @param historyManager
   * @throws java.io.IOException
   */
  public CommandTabjPanel(HistoryManager historyManager) throws IOException {
    this.historyManager = historyManager;
    initComponents();

    historyjTable.setModel(historyManager);
    historyjTable.changeSelection(historyjTable.getRowCount() - 1, 0, false, false);
    historyjTable.setRowSelectionAllowed(true);

    cmdHelper = new RunCmdHelper(new OutputStreamToTextArea(outputTextArea));
    cmdHelper.setWorkingDirectory(new File(System.getProperty("user.dir", "C:\\")));

    atEndOfListFirstTime = true;

    commandjTextField.setFocusTraversalKeysEnabled(false);

  }

  public void saveHistory() {
    try {
      historyManager.writeHistoryFile();
    } catch (IOException ex) {
      Logger.getLogger(CommandTabjPanel.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    commandjScrollPane = new javax.swing.JScrollPane();
    commandjTextField = new javax.swing.JTextField();
    jPanel1 = new javax.swing.JPanel();
    verticaljSplitPane = new javax.swing.JSplitPane();
    outputjScrollPane = new javax.swing.JScrollPane();
    outputTextArea = new javax.swing.JTextArea();
    historyjScrollPane = new javax.swing.JScrollPane();
    historyjTable = new javax.swing.JTable();

    setBackground(new java.awt.Color(255, 51, 51));
    setAutoscrolls(true);
    setEnabled(false);
    setFocusable(false);
    setOpaque(false);
    setRequestFocusEnabled(false);
    setVerifyInputWhenFocusTarget(false);

    commandjScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    commandjScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
    commandjScrollPane.setMinimumSize(new java.awt.Dimension(0, 40));
    commandjScrollPane.setPreferredSize(new java.awt.Dimension(0, 0));

    commandjTextField.setBackground(new java.awt.Color(0, 0, 0));
    commandjTextField.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
    commandjTextField.setForeground(new java.awt.Color(102, 255, 0));
    commandjTextField.setCaretColor(new java.awt.Color(100, 255, 0));
    commandjTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
    commandjTextField.setDoubleBuffered(true);
    commandjTextField.setMinimumSize(new java.awt.Dimension(6, 6));
    commandjTextField.setNextFocusableComponent(commandjTextField);
    commandjTextField.setPreferredSize(new java.awt.Dimension(6, 6));
    commandjTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        commandjTextFieldActionPerformed(evt);
      }
    });
    commandjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        commandjTextFieldKeyPressed(evt);
      }
      public void keyReleased(java.awt.event.KeyEvent evt) {
        commandjTextFieldKeyReleased(evt);
      }
    });
    this.requestFocus();
    commandjScrollPane.setViewportView(commandjTextField);

    jPanel1.setBackground(new java.awt.Color(153, 255, 102));

    verticaljSplitPane.setDividerSize(3);
    verticaljSplitPane.setResizeWeight(0.8);
    verticaljSplitPane.setContinuousLayout(true);
    verticaljSplitPane.setDoubleBuffered(true);
    verticaljSplitPane.setMinimumSize(new java.awt.Dimension(200, 200));
    verticaljSplitPane.setName(""); // NOI18N
    verticaljSplitPane.setPreferredSize(new java.awt.Dimension(0, 0));

    outputjScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    outputjScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    outputjScrollPane.setMinimumSize(new java.awt.Dimension(0, 0));

    outputTextArea.setEditable(false);
    outputTextArea.setBackground(new java.awt.Color(0, 0, 0));
    outputTextArea.setColumns(20);
    outputTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    outputTextArea.setForeground(new java.awt.Color(100, 255, 0));
    outputTextArea.setRows(5);
    outputjScrollPane.setViewportView(outputTextArea);

    verticaljSplitPane.setLeftComponent(outputjScrollPane);

    historyjScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    historyjScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    historyjScrollPane.setAutoscrolls(true);
    historyjScrollPane.setMinimumSize(new java.awt.Dimension(0, 0));
    historyjScrollPane.setPreferredSize(new java.awt.Dimension(50, 50));

    historyjTable.setBackground(new java.awt.Color(0, 0, 0));
    historyjTable.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    historyjTable.setForeground(new java.awt.Color(100, 255, 0));
    historyjTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null}
      },
      new String [] {
        "Command"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    historyjTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    historyjTable.setDoubleBuffered(true);
    historyjTable.setDragEnabled(true);
    historyjTable.setFillsViewportHeight(true);
    historyjTable.setRequestFocusEnabled(false);
    historyjTable.setShowHorizontalLines(false);
    historyjTable.setShowVerticalLines(false);
    historyjTable.setSurrendersFocusOnKeystroke(true);
    historyjTable.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        historyjTableMouseClicked(evt);
      }
    });
    historyjTable.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        historyjTableKeyTyped(evt);
      }
    });
    historyjScrollPane.setViewportView(historyjTable);

    verticaljSplitPane.setRightComponent(historyjScrollPane);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
      .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(verticaljSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 187, Short.MAX_VALUE)
      .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(verticaljSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 187, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(commandjScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(commandjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void commandjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandjTextFieldActionPerformed

  }//GEN-LAST:event_commandjTextFieldActionPerformed

  private void commandjTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandjTextFieldKeyPressed
    Integer key = evt.getKeyCode();
    keysPressed.add(key);

//    System.out.println("evt.getKeyCode()=" + key);
//    System.out.println("historyManager.getHistoryPosition()=" + historyManager.getHistoryPosition());
//    System.out.println("historyManager.getRowCount()=" + historyManager.getRowCount());
    switch (key) {
      case KeyEvent.VK_UP: {

        if (atEndOfListFirstTime) {
          atEndOfListFirstTime = false;
          commandjTextField.setText(historyManager.getCurrent());
          return;
        }
        commandjTextField.setText(historyManager.up());
        try {
          historyjTable.changeSelection(historyManager.getHistoryPosition(), 0, false, false);
        } catch (IllegalArgumentException e) {
          ;
        }

        break;
      }
      case KeyEvent.VK_DOWN: {
        commandjTextField.setText(historyManager.down());
        try {
          historyjTable.changeSelection(historyManager.getHistoryPosition(), 0, false, false);
        } catch (IllegalArgumentException e) {
          ;
        }

        break;
      }
      case KeyEvent.VK_TAB: {
        boolean backwards = true;
        if (keysPressed.contains(KeyEvent.VK_SHIFT)) {
          backwards = false;
        }

        int position = commandjTextField.getCaretPosition();
        String cmd = historyManager.complete(commandjTextField.getText(), position, backwards);
        commandjTextField.setText(cmd);
        commandjTextField.setCaretPosition(position);
        atEndOfListFirstTime = false;
        historyjTable.changeSelection(historyManager.getHistoryPosition(), 0, false, false);

        break;
      }
      case KeyEvent.VK_ENTER: {
        String cmd = commandjTextField.getText();

        if (!cmd.isEmpty()) {
          historyManager.add(cmd);
          cmdHelper.runCmd(cmd);
          commandjTextField.setText("");
          historyManager.resetPosition();
          historyjTable.changeSelection(historyManager.getHistoryPosition(), 0, false, false);
          atEndOfListFirstTime = true;
          return;
        }
      }
      break;

      default:
        if (keysPressed.contains(KeyEvent.VK_CONTROL) && (key != KeyEvent.VK_CONTROL)) {
          switch (key) {
            case KeyEvent.VK_C: {
              cmdHelper.runCmd(Character.toString((char) 0x03));
              commandjTextField.setText("");
              historyManager.resetPosition();
              historyjTable.changeSelection(historyManager.getHistoryPosition(), 0, false, false);

              break;
            }

            case KeyEvent.VK_R: {
              System.out.println("search in history not implementet yet...");

              break;
            }

            case KeyEvent.VK_Q: {
              saveHistory();
              System.exit(0);
              break;
            }

            default:

          }
        }

    }


  }//GEN-LAST:event_commandjTextFieldKeyPressed

  private void historyjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyjTableMouseClicked

  }//GEN-LAST:event_historyjTableMouseClicked

  private void historyjTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_historyjTableKeyTyped
    historyjTable.scrollRectToVisible(historyjTable.getVisibleRect());
  }//GEN-LAST:event_historyjTableKeyTyped

  private void commandjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandjTextFieldKeyReleased
    keysPressed.remove(evt.getKeyCode());
  }//GEN-LAST:event_commandjTextFieldKeyReleased

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane commandjScrollPane;
  public javax.swing.JTextField commandjTextField;
  private javax.swing.JScrollPane historyjScrollPane;
  private javax.swing.JTable historyjTable;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JTextArea outputTextArea;
  private javax.swing.JScrollPane outputjScrollPane;
  private javax.swing.JSplitPane verticaljSplitPane;
  // End of variables declaration//GEN-END:variables
}
